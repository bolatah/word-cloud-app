name: Build Multi-Platform Installer

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            node_version: "18"
          - os: windows-latest
            node_version: "18"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Wine
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine64 wine32

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Set up GitHub Token
        run: echo "GH_TOKEN=${{ secrets.GH_TOKEN }}" >> $GITHUB_ENV

      - name: Debug GH_TOKEN
        run: echo "GH_TOKEN is set"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      # Set tag name correctly
      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$TAG" ]; then
            TAG="v1.0.0"
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Set tag name for OS
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "OS_TAG=${{ env.TAG }}-windows" >> $GITHUB_ENV
          else
            echo "OS_TAG=${{ env.TAG }}-linux" >> $GITHUB_ENV
          fi

      - name: Build Windows Installer
        if: matrix.os == 'windows-latest'
        run: npm run build:win
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Build Linux Installer
        if: matrix.os == 'ubuntu-latest'
        run: npm run build:linux
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Windows Build Artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: dist/*.exe
          compression-level: 0

      - name: Upload Linux Build Artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: dist/*.AppImage
          compression-level: 0

      - name: List files in dist directory
        run: |
          echo "EXE_FILE=$(ls dist/*.exe | head -n 1)" >> $GITHUB_ENV
          echo "APPIMAGE_FILE=$(ls dist/*.AppImage | head -n 1)" >> $GITHUB_ENV

      - name: Create Release for Windows
        if: matrix.os == 'windows-latest'
        id: create_release_windows
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.OS_TAG }}
          release_name: Release ${{ env.OS_TAG }}
          body: "Release notes for ${{ env.OS_TAG }} (Windows)"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release_windows.outputs.upload_url }}
          asset_path: ${{ env.EXE_FILE }}
          asset_name: WordCloudApp-${{ env.OS_TAG }}.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Create Release for Linux
        id: create_release_linux
        if: matrix.os == 'ubuntu-latest'
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.OS_TAG }}
          release_name: Release ${{ env.OS_TAG }}
          body: "Release notes for ${{ env.OS_TAG }} (Linux)"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Release Asset (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release_linux.outputs.upload_url }}
          asset_path: ${{ env.APPIMAGE_FILE }}
          asset_name: WordCloudApp-${{ env.OS_TAG }}.AppImage
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
